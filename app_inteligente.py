# app_inteligente.py

# ==============================================================================
# 1. IMPORTA√á√ÉO DAS BIBLIOTECAS
# ==============================================================================
# Streamlit √© a biblioteca para criar a interface web (t√≠tulos, bot√µes, etc.).
import streamlit as st
# Requests √© a biblioteca que nos permite "conversar" com a API do n8n.
import requests

# ==============================================================================
# 2. CONFIGURA√á√ÉO PRINCIPAL DA P√ÅGINA
# ==============================================================================
# IMPORTANTE: Esta √© a √∫nica linha que voc√™ PRECISA alterar.
# Cole aqui a URL de 'Production' ou 'Test' que voc√™ copiou do seu n√≥ Webhook no n8n.
N8N_WEBHOOK_URL = "URL_DO_SEU_WEBHOOK_AQUI" 

# Configura a p√°gina para usar a largura total da tela e define um t√≠tulo na aba do navegador.
st.set_page_config(layout="wide", page_title="Automa√ß√£o de Compra de VR/VA")

# ==============================================================================
# 3. CONSTRU√á√ÉO DA INTERFACE DO USU√ÅRIO (O QUE O USU√ÅRIO V√ä)
# ==============================================================================
st.title("ü§ñ Automa√ß√£o para Compra de Benef√≠cios (VR/VA)")
st.markdown("Arraste e solte todas as 10 planilhas de base na √°rea abaixo para iniciar o c√°lculo.")

st.header("1. Carregar Pacote de Arquivos")

# ESTA √â A MUDAN√áA PRINCIPAL:
# Criamos UMA √öNICA caixa de upload. 
# 'accept_multiple_files=True' permite que o usu√°rio arraste quantos arquivos quiser.
# O resultado √© armazenado em uma LISTA chamada 'uploaded_files_list'.
uploaded_files_list = st.file_uploader(
    "Arraste as 10 planilhas (.xlsx) aqui:",
    type=["xlsx"],  # Aceita apenas arquivos .xlsx
    accept_multiple_files=True
)

# Apenas um feedback visual para o usu√°rio, mostrando quantos arquivos ele j√° carregou.
if uploaded_files_list:
    st.info(f"Arquivos carregados: {len(uploaded_files_list)} de 10 necess√°rios.")
else:
    st.info("Aguardando os 10 arquivos...")

# Adiciona uma linha horizontal para separar visualmente as se√ß√µes.
st.divider()

# ==============================================================================
# 4. L√ìGICA DO PROCESSAMENTO (O QUE ACONTECE AO CLICAR NO BOT√ÉO)
# ==============================================================================
# 'st.button' cria o bot√£o principal. O c√≥digo dentro deste 'if' s√≥ ser√° executado
# quando o usu√°rio clicar neste bot√£o.
if st.button("üöÄ Processar e Gerar Arquivo Final", type="primary", use_container_width=True):
    
    # Verifica√ß√£o de Seguran√ßa: Garantir que o usu√°rio enviou exatamente os 10 arquivos.
    if uploaded_files_list and len(uploaded_files_list) == 10:
        
        # Prepara o "pacote" de arquivos para o n8n.
        # Como o n8n espera arquivos em um formato espec√≠fico (multipart/form-data),
        # precisamos criar uma lista de tuplas.
        # Cada tupla cont√©m: (nome_generico, (nome_real_do_arquivo, conteudo_do_arquivo))
        files_to_send_to_n8n = []
        
        # Faz um loop por cada arquivo que o usu√°rio carregou
        for i, file in enumerate(uploaded_files_list):
            # A "etiqueta" gen√©rica ser√° 'file_0', 'file_1', 'file_2', etc.
            # O n8n vai usar o 'file.name' (o nome real do arquivo) para saber o que √©.
            files_to_send_to_n8n.append(
                (f'file_{i}', (file.name, file.getvalue()))
            )

        # 'st.spinner' mostra uma mensagem amig√°vel de "carregando" para o usu√°rio.
        with st.spinner('Aguarde... O agente n8n est√° identificando, organizando e calculando os dados...'):
            try:
                # Este √© o comando que efetivamente envia os arquivos para o n8n.
                # Ele faz uma requisi√ß√£o do tipo POST para a URL que configuramos.
                # 'files=' anexa nosso pacote de arquivos.
                # 'timeout=300' d√° ao n8n 5 minutos para terminar o trabalho.
                response = requests.post(N8N_WEBHOOK_URL, files=files_to_send_to_n8n, timeout=300)
                
                # Se o n8n retornar um erro (ex: status 500), esta linha ir√° acusar o erro e pular para o 'except'.
                response.raise_for_status()

                # Se tudo deu certo, mostramos uma mensagem de sucesso.
                st.success("Processamento conclu√≠do com sucesso!")

                # 'st.download_button' cria o bot√£o de download para o usu√°rio.
                # 'response.content' cont√©m o arquivo Excel bin√°rio que o n8n enviou de volta.
                st.download_button(
                    label="‚úÖ Baixar Planilha Final para Fornecedor",
                    data=response.content,
                    file_name="VR_MENSAL_PROCESSADO.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )

            except requests.exceptions.RequestException as e:
                # Se houver um erro de conex√£o ou o n8n estiver offline, esta mensagem aparecer√°.
                st.error(f"Erro na comunica√ß√£o com o servidor de automa√ß√£o (n8n): {e}")
                st.info("Verifique se o workflow no n8n est√° ativo e se a URL do Webhook est√° correta.")
            except Exception as e:
                # Pega qualquer outro erro inesperado que possa acontecer.
                st.error(f"Ocorreu um erro inesperado durante o processamento: {e}")

    else:
        # Se os 10 arquivos n√£o estiverem l√°, avisa o usu√°rio.
        st.warning(f"Aten√ß√£o: Voc√™ carregou {len(uploaded_files_list)} arquivo(s). Por favor, carregue todos os 10 arquivos juntos.")